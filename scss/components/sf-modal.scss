/**
 * `sf-modal` is a fixed dialog popup.
 *
 * It must have the following layout:
 *
 *   <div class="sf-modal" id="myModal">
 *     <div class="sf-modal-body">...</div>
 *   </div>
 *
 * It becomes visible when it has an `.active` class. You can add the class
 * programmatically, click an element with the [data-sf-toggle-id] attribute
 * pointing to the modal's id, or use stylific's JavaScript APIs.
 *
 * To close the modal, click its overlay or the close button, or hit Esc.
 *
 * # [data-sf-toggle-id]
 *
 * When an element with this attribute is clicked, it will toggle a modal whose
 * id is referenced by the attribute, if any.
 *
 * Example usage:
 *
 *   <button data-sf-toggle-id="myModal">...</button>
 *
 *   <div class="sf-modal" id="myModal">
 *     <div class="sf-modal-body">...</div>
 *   </div>
 *
 *
 * # Modals inside <template> tags
 *
 * A modal may optionally be enclosed into a <template> tag. The template needs
 * an id to which you can point with [data-sf-toggle-id], and the modal
 * doesn't need one.
 *
 * When this modal is toggled, stylific clones it, insert the clone into the DOM
 * next to the original, and emit a DOM event `sf:dom:add` on it, which lets you
 * mutate the new modal before it's displayed. On the next paint frame, the
 * library adds the `.active` class to display the modal.
 *
 * When the cloned modal is closed, it's removed from the DOM.
 *
 * The [data-sf-toggle-id] attribute must reference the id of the template
 * enclosing the modal.
 *
 * Example usage:
 *
 *   <button data-sf-toggle-id="myModal">...</button>
 *
 *   <template id="myModal">
 *     <div class="sf-modal">
 *       <div class="sf-modal-body">...</div>
 *     </div>
 *   </template>
 */

/**
 * ToDo.
 *
 * Include a variant with a fixed header; the user should be able to fix
 * the position of an arbitrary descendant, not just an immediate child.
 *
 * Consider if we can close only the last opened modal when Esc is pressed.
 *
 * Consider adding animation options.
 */

@use 'sass:math';

// Main styles.
.sf-modal {

  // Layout.
  @include sf-fixed-overlay;
  z-index: $sf-z-index-modal;
  width: 100%;
  width: 100vw;
  height: auto;
  min-height: 100%;
  min-height: 100vh;
  @include sf-scroll-v;

  // Inner layout.
  display: block;
  // Center the body as an inline block. We can't use a flex container for that,
  // because it would force large modal bodies up beyond the window viewport.
  line-height: 100vh;
  text-align: center;

  // Overlay.
  &, &[class*=theme-] {
    background-color: $sf-color-overlay;
  }

  // Hide unless activated and animate the transitions.
  &:not(.active) {
    opacity: 0;
    visibility: hidden;
  }
  @include sf-transitions(all);
}

// Body styles.
.sf-modal-body {
  /**
   * Layout and positioning.
   */
  position: relative;
  // Make sure it's not covered by the modal overlay.
  z-index: $sf-z-index-modal + 1;
  // Positioning.
  display: inline-block;
  vertical-align: middle;
  top: -1px;
  margin: $sf-space * 2 auto;
  // Negate parent's centering adjustments.
  line-height: $sf-line-height;
  text-align: initial;

  /**
   * Dimensions.
   */
  height: auto;
  // Limit the width in the same way as `body` in `layout.scss`.
  max-width: $sf-body-max-width;

  // Default width.
  width: 50%;
  @include sf-eq-md {width: 75%}
  @include sf-eq-sm {width: 100%}

  // Narrow option.
  .sf-modal.sf-modal-narrow & {
    width: 33%;
    @include sf-eq-md {width: 50%}
    @include sf-eq-sm {width: 75%}
  }

  // Wide option.
  .sf-modal.sf-modal-wide & {
    width: 100%;
    @include sf-eq-md {width: 100%}
    @include sf-eq-sm {width: 100%}
  }

  // Whitespace.
  @extend .container;
  // Extra padding for symmetry with the close button. Have to artificially
  // boost the specificity to match the top whitespace caused by the close
  // button.
  &:not(:root) {
    padding-bottom: $sf-space * 1.5;
  }

  // Cosmetic.
  border-radius: $sf-border-radius;
  @include sf-shadow-medium;
  // Default background colour.
  background-color: $sf-color-background;

  // Hide unless activated and animate the transitions.
  .sf-modal:not(.active) > & {
    opacity: 0;
    visibility: hidden;
    transform: scale(0.8);
  }
  @include sf-transitions(all);
}

// Modal close button.
.sf-modal-close {
  // Negate default button styles.
  @extend .sf-button-flat;
  padding: (math.div($sf-space, 4)) (math.div($sf-space, 2));
  border-radius: 0 $sf-border-radius 0 $sf-border-radius;

  // Layout.
  display: block;
  float: right;

  // Offset the container's padding and negate the margins added by its
  // space-out rules.
  .sf-modal-body & {
    margin: (-$sf-space) (-$sf-space) 0 0;
  }

  // Make sure the next element doesn't collide with the button, and negate
  // any extra whitespace caused by its presence.
  + * {
    clear: both;
    margin-top: 1px;
  }

  // Cosmetic.
  font-size: $sf-font-size-small;
  cursor: pointer;

  // Default icon.
  &:empty {
    padding: 0 math.div($sf-space, 4);
    font-size: $sf-font-size-large;
    &::after {
      content: '‚êõ';
    }
  }

  @include sf-transitions(all);
}
