/**
 * Button styling. Somewhat inspired by material design.
 *
 * Usage:
 *
 *   <button>...</button>
 *   <span class="sf-button">...</span>
 */

/**
 * TODO.
 *
 * Review how to best implement a button whose dimensions stay unchanged when
 * the content is changed dynamically. Easier in a flexible container, more
 * difficult when surrounded by whitespace. Might make an option with some
 * minimum width, a set height, and text ellipsis on overflow.
 */

@use 'sass:math';

.sf-button,
// Override native buttons too (ignore input[type=button]).
button {

  /**
   * Layout.
   */
  padding: math.div($sf-space, 2);

  // Normalise font size (browser defaults may be unpredictable).
  font-size: inherit;

  // Normalise text and background colour.
  color: inherit;
  background-color: inherit;

  // Border styles.
  border: none;
  border-radius: $sf-border-radius;

  // A bit of skeuomorphism.
  @include sf-shadow(0 0.1rem 0.3rem -1px rgba(5, 5, 5, 0.5), $indicate-focus: true);
  // Flatten when depressed or permanently activated.
  &:active, &.active {
    @include sf-focus-indicator;
  }
  // Flatten when disabled.
  &[disabled] {
    box-shadow: none;
  }

  // Restore the normal dimensions when used as an icon.
  &[class*=sf-icon] {
    width: auto;
    height: auto;
  }

  // Animate style changes.
  @include sf-transitions(all);

  // Indicate interactivity.
  cursor: pointer;
  @include sf-register-interactive-selector;
}

// Flat version.
.sf-button-flat {
  @include sf-shadow(none, $indicate-focus: true);
  // Remove the border radius to make the focus indicator and the background
  // rectangular, which is more in line with the look of other "flat" elements
  // (e.g. anchors).
  border-radius: 0;
}
