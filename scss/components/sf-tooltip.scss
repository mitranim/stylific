/**
 *
 * # Usage
 *
 * A tooltip is invoked with an attribute, like so:
 *
 *   <p data-sf-tooltip="tooltip text">hover me</p>
 *
 *
 * ## Position
 *
 * By default, it's positioned above the host element. It can be moved to the
 * bottom with a position option:
 *
 *   <p data-sf-tooltip="tooltip text" class="sf-position-bottom">hover me</p>
 *
 * The following positions are supported: top, right, bottom, left.
 *
 *
 * ## Trigger
 *
 * By default, the tooltip is triggered with :hover. You can specify other
 * triggers with another attribute:
 *
 *   <p data-sf-tooltip="tooltip text" contenteditable
 *      data-sf-trigger="hover focus">hover or focus me</p>
 *
 * The following triggers are supported: :active, :disabled, :focus, :hover,
 * :target. You can also add the class .sf-tooltip-visible to make the tooltip
 * unconditionally visible.
 *
 *
 * # Limitations
 *
 * This implementation uses the ::after pseudoelement. This doesn't require any
 * additional markup for most elements, but doesn't work with
 * <input type="text"> and <textarea> since they can't have children. For the
 * :hover and :active versions, you can work around this by wrapping the input
 * into a parent element and applying the tooltip attributes to the parent.
 * These states naturally propagate from the input to the parent, and the
 * tooltip will be visible. However, this won't work for :focus, :disabled,
 * and, most likely, :target, since these states don't propagate to parents.
 *
 * Example of using a tooltip with an input:
 *
 *   <p data-sf-tooltip="tooltip text">
 *     <input>
 *   </p>
 *
 * It also sets {position: relative} on the host.
 */

/**
 * ToDo.
 *
 * Add triangles.
 *
 * Look for ways to implement tooltips that work with <input type="text"> and
 * <textarea> without involving parents (siblings and attributes only).
 */

@use 'sass:math';

[data-sf-tooltip] {

  // Use grayscale negatives of the base text and background colours. If the
  // user adjusts the defaults, the tooltips adjust to the new theme
  // automatically.
  $color-bg: rgba(sf-contrasting-color($sf-color-background), 0.85);
  $color-text: sf-contrasting-color($sf-color-text);

  /**
   * Layout.
   */
  position: relative;

  /**
   * Shared style for tooltip content and triangle.
   */
  &::after, &::before {
    // Layout.
    display: block;
    position: absolute;
    z-index: $sf-z-index-tooltip;

    // Hidden unless the host is activated. Both opacity and visibility are
    // required for animating the transition.
    opacity: 0;
    visibility: hidden;
    // Animate the transitions.
    @include sf-transitions(all);

    // Use a constant small font size.
    font-size: unquote('#{$sf-tooltip-proportion}rem');

    // Counteract inherited font styles, if any.
    font-style: normal;
    font-weight: $sf-font-weight;
  }

  // Version with scaling font size.
  &.sf-tooltip-scale-size {
    &::after, &::before {
      font-size: unquote('#{$sf-tooltip-proportion}em');
    }
  }

  /**
   * Content-specific styles.
   */
  &::after {
    content: attr(data-sf-tooltip);

    // Prevent from shrinking to the width or height of the parent.
    white-space: pre;

    // Use a fraction of the standard padding. We scale it down twice as much as
    // other dimensions.
    padding: $sf-space * math.div($sf-tooltip-proportion, 2);

    // Use a fraction of the standard border radius.
    border-radius: $sf-border-radius * $sf-tooltip-proportion;

    // Colours.
    background-color: $color-bg;
    color: $color-text;
  }

  /**
   * Triangle-specific styles.
   */
  &::before {
    content: '';
    // Cosmetic.
    border: $sf-tooltip-offset solid transparent;
  }

  // Never display empty tooltips.
  &[data-sf-tooltip='']::after {content: none}
  &[data-sf-tooltip='']::before {content: none}

  /**
   * Tooltip content and triangle positioning.
   */

  @mixin tooltip-position($main, $cross) {
    $translate: if($main == top or $main == bottom, translateX, translateY);
    $border-side: map-get((
      bottom: top,
      top: bottom,
      left: right,
      right: left
    ), $main);

    &::after {
      #{$main}: 100%;
      margin-#{$main}: $sf-tooltip-offset * 2;
      #{$cross}: 50%;
      transform: unquote('#{$translate}(-50%)');
    }
    &::before {
      // Layout.
      #{$main}: 100%;
      margin-#{$main}: 1px; // Fix for a 1px interval that appears in some browsers.
      #{$cross}: 50%;
      margin-#{$cross}: -$sf-tooltip-offset;
      // Border.
      border-#{$border-side}: $sf-tooltip-offset solid $color-bg;
    }
  }

  // Top (default).
  &:not([class*=sf-position]), &.sf-position-top {
    @include tooltip-position(bottom, left);
  }

  // Right.
  &.sf-position-right {
    @include tooltip-position(left, top);
  }

  // Bottom.
  &.sf-position-bottom {
    @include tooltip-position(top, left);
  }

  // Left.
  &.sf-position-left {
    @include tooltip-position(right, top);
  }

  /**
   * Triggered state styles. In the absence of a trigger attribute, the
   * tooltip is triggered by hovering the host. Trigger indicators may be
   * combined like so:
   *
   *   <button data-sf-tooltip="tooltip text"
   *           data-sf-trigger="hover focus">hover or focus me</button>
   */
  &:not([data-sf-trigger]):hover,
  &[data-sf-trigger~=active]:active,
  &[data-sf-trigger~=disabled]:disabled,
  &[data-sf-trigger~=focus]:focus,
  &[data-sf-trigger~=hover]:hover,
  &[data-sf-trigger~=target]:target,
  // Unconditional visibility; hook for JavaScript enhancement.
  &.sf-tooltip-visible {
    &::after, &::before {
      opacity: initial;
      visibility: inherit;
    }
  }
}

// Inline elements that are likely to be used inside paragraphs should be set to
// inline-block when used with `sf-tooltip`. Tooltip relies on element's
// position and assumes it to be a small block. Inline elements are unique: they
// wrap on linebreaks, distoring the tooltip's position. This gets even worse if
// the inline element contains a blocky element. This rule fixes those issues
// and encourages authors to keep tooltip hosts small.
b, big, i, small, abbr, acronym, cite, code, dfn, em,
kbd, strong, samp, var, a, bdo, q, span, sub, sup {
  &[data-sf-tooltip] {
    display: inline-block;
  }
}
