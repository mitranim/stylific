/**
 * Navigation bar. Has static and fixed versions, and can auto-collapse into
 * a dropdown when the screen is narrow.
 *
 *   <body>
 *     <div class="sf-navbar">
 *       <a href=...>...</a>
 *       ...
 *     </div>
 *     ...
 *   </body>
 *
 * See http://mitranim.com/stylific/components/#sf-navbar
 */

@use 'sass:math';

.sf-navbar {

  /**
   * Layout.
   */
  // Take up all available width.
  width: 100%;
  // Set a fixed height, so we can offset the next element accordingly when the
  // navbar is fixed. This is also required for percentage-based rules on
  // children.
  min-height: $sf-navbar-height;
  // Changing position to relative positions the navbar shadow above any static
  // siblings following the navbar.
  position: relative;
  // Fixed version.
  &.sf-navbar-fixed {
    /**
     * Layout.
     */
    position: fixed;
    top: 0;
    // Set a proper z-index.
    z-index: $sf-z-index-navbar;
    // Use the body's maximum width and center horizontally.
    max-width: $sf-body-max-width;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;

    // Offset the next element by the same margin. The next element must be in
    // the document flow (i.e. not fixed or absolute or float).
    & + * {
      margin-top: $sf-navbar-height;
    }
  }

  /**
   * Inner layout.
   */
  display: flex;
  flex-wrap: wrap;

  // Typography.
  font-size: 1.2em;
  text-align: center;

  // Cosmetic.
  background-color: $sf-color-background;
  @include sf-shadow-down;

  // Immediate child styles.
  > * {
    /**
     * Layout.
     */
    // Stretch across the container.
    flex: 1;
    // This is required for stretching vertically if min-height is set on the
    // parent.
    min-height: inherit;

    // Inner layout.
    @include sf-flex-host-center;

    // Whitespace.
    padding: math.div($sf-space, 2);
  }

  /*------------------------------ Collapsing -------------------------------*/

  /**
   * These styles define the auto-collapsing feature. It allows the navbar to
   * automatically collapse past a certain nth child, turning the remaining
   * elements into a dropdown toggled with a button. Collapsing only happens
   * before a certain media breakpoint controlled by a variable. By default,
   * it matches the breakpoint used for other responsive layouts.
   *
   * To enable collapsing, the user needs to include a
   * <div class="sf-navbar-toggle">...</div> before the collapsable children.
   * The structure must be as follows:
   *
   *   <div class="sf-navbar">
   *     ... [non-collapsing elements]
   *     <div class="sf-navbar-toggle"> ... [optional content] </div>
   *     ... [auto-collapsing elements]
   *   </div>
   */

  /**
   * Base toggle styles.
   */
  @at-root .sf-navbar-toggle {
    /**
     * Layout.
     */
    // Stay inflexible, stretch only to accommodate the content.
    flex: none;
    // Reserve some space even when used without content.
    min-width: 10%;
    // Hidden by default.
    &, .sf-navbar > & {display: none}
    // Reposition after the pre-breakpoint navbar children.
    order: 1;

    // Overlay for closing the toggled dropdown.
    &::before {
      @include sf-fixed-overlay;
      opacity: 0;
    }

    // Indicators.
    &::after {
      @include sf-toggle-inactive;
    }
    &:not(:empty)::after {
      margin-left: math.div($sf-space, 4);
    }

    // Indicate interactivity.
    cursor: pointer;
    @include sf-register-interactive-selector;
  }

  /**
   * Active toggle styles.
   */
  @at-root .sf-navbar-toggle.active {
    // Make the toggle overlay interactive.
    &::before {
      content: '';
      z-index: $sf-z-index-navbar;
    }
    // Modify the indicator.
    &::after {
      @include sf-toggle-active;
    }
  }

  /**
   * Styles for post-toggle children that only apply before the media breakpoint.
   */
  @mixin collapse-rules {
    /**
     * Base styles.
     */
    // Display the toggle.
    .sf-navbar-toggle {display: inherit}
    // Base styling for collapsable children.
    .sf-navbar-toggle ~ * {
      /**
       * Layout.
       */
      // Try to take up the entire line. With {flex-wrap: wrap} enabled on the
      // parent, this wraps every child to its own line.
      flex: 100%;
      // Reorder after the collapse toggle.
      order: 2;
    }

    // Styles for collapsed children.
    .sf-navbar-toggle:not(.active) ~ * {
      display: none;
    }

    // Styles for active children.
    .sf-navbar-toggle.active ~ * {
      // Make sure the elements are higher than the toggle's overlay.
      z-index: $sf-z-index-navbar + 1;
    }
  }
  @media (max-width: $sf-breakpoint-sm) {@include collapse-rules;}
  // Version that always folds.
  &.sf-navbar-fold {@include collapse-rules;}

  /**
   * "navtabs" version.
   */
  &.sf-navbar-tabs {
    box-shadow: none;
    @include sf-border-weak;
  }
}
