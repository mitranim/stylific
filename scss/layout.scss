/********************************** Global ***********************************/

@use 'sass:math';

html {
  // Required for using % dimensions on children.
  width: 100%;
  height: 100%;
}

// Normalise whitespace.
*, *::before, *::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
ul, ol, dl {
  @include sf-space-out-vertical(math.div($sf-space, 2));
}
dl dt:not(:first-of-type) {
  margin-top: $sf-space;
}

body {
  /**
   * Layout.
   */
  // Limit the body width and center it horizontally.
  max-width: $sf-body-max-width;
  margin-left: auto;
  margin-right: auto;
  // Stretch vertically to fill the viewport.
  min-height: 100%;
  min-height: 100vh;

  /**
   * Inner layout.
   */
  // This allows us to push the footer downwards.
  display: flex;
  flex-direction: column;
  // These vital properties are implicit, but we duplicate them to avoid
  // accidental overrides by the user.
  align-items: stretch;
  justify-content: flex-start;
}

/********************************** Layout ***********************************/

// Spaced-out container for typographically meaningful elements, like
// paragraphs, that require surrounding whitespace.
.container {
  padding: $sf-space;
  @include sf-space-out-vertical;
}

/**
 * Flex container rules.
 */

// Axis directions.
$-sf-directions: row, col;
// Main-axis variants.
$-sf-main: start, center, end, around, between;
// Cross-axis variants.
$-sf-cross: start, center, end, stretch;

@function sf-container-class($prefix, $direction, $main, $cross) {
  @return '.#{$prefix}#{$direction}-#{$main}-#{$cross}';
}

@function sf-each-for-direction($direction, $prefix: '') {
  $selector: ();
  @each $main in $-sf-main {
    @each $cross in $-sf-cross {
      $class: sf-container-class($prefix, $direction, $main, $cross);
      $selector: append($selector, $class, 'comma');
    }
  }
  @return $selector;
}

@function sf-each-container($prefix: '') {
  $selector: ();
  @each $direction in $-sf-directions {
    $selector: append($selector, sf-each-for-direction($direction, $prefix), 'comma');
  }
  @return $selector;
}

@function sf-each-for-main($main, $prefix: '') {
  $selector: ();
  @each $direction in $-sf-directions {
    @each $cross in $-sf-cross {
      $class: sf-container-class($prefix, $direction, $main, $cross);
      $selector: append($selector, $class, 'comma');
    }
  }
  @return $selector;
}

@function sf-each-for-cross($cross, $prefix: '') {
  $selector: ();
  @each $direction in $-sf-directions {
    @each $main in $-sf-main {
      $class: sf-container-class($prefix, $direction, $main, $cross);
      $selector: append($selector, $class, 'comma');
    }
  }
  @return $selector;
}

@mixin sf-container-rules($prefix: '') {
  // Base directions.
  #{sf-each-container($prefix)}          {display: flex}
  #{sf-each-for-direction(row, $prefix)} {flex-direction: row}
  #{sf-each-for-direction(col, $prefix)} {flex-direction: column}

  // Main axis alignment variants.
  #{sf-each-for-main(start, $prefix)}    {justify-content: flex-start}
  #{sf-each-for-main(center, $prefix)}   {justify-content: center}
  #{sf-each-for-main(end, $prefix)}      {justify-content: flex-end}
  #{sf-each-for-main(around, $prefix)}   {justify-content: space-around}
  #{sf-each-for-main(between, $prefix)}  {justify-content: space-between}

  // Cross axis alignment variants.
  #{sf-each-for-cross(start, $prefix)}   {align-items: flex-start}
  #{sf-each-for-cross(center, $prefix)}  {align-items: center}
  #{sf-each-for-cross(end, $prefix)}     {align-items: flex-end}
  #{sf-each-for-cross(stretch, $prefix)} {align-items: stretch}

  // Child wrapping.
  .#{$prefix}wrap   {flex-wrap: wrap}
  .#{$prefix}nowrap {flex-wrap: nowrap}
}

@include sf-container-rules;
@include sf-eq-sm {@include sf-container-rules(sm-);}
@include sf-gt-sm {@include sf-container-rules(md-);}
@include sf-gt-md {@include sf-container-rules(lg-);}

/**
 * Flex child rules.
 */

@mixin sf-child-rules($prefix: '') {
  // Alignment.
  .#{$prefix}self-start   {align-self: flex-start}
  .#{$prefix}self-center  {align-self: center}
  .#{$prefix}self-end     {align-self: flex-end}
  .#{$prefix}self-stretch {align-self: stretch}

  // Negation.
  .#{$prefix}flex-none {flex: none}

  // .flex-N {flex: N} where 1 <= N <= 12
  $i: 1;
  @while $i <= 12 {
    .#{$prefix}flex-#{$i} {flex: $i}
    $i: $i + 1;
  }

  // .order-N {order: N} where -1 <= N <= 3
  $i: -1;
  @while $i <= 3 {
    .#{$prefix}order-#{$i} {order: $i}
    $i: $i + 1;
  }
}

@include sf-child-rules;
@include sf-eq-sm {@include sf-child-rules(sm-);}
@include sf-gt-sm {@include sf-child-rules(md-);}
@include sf-gt-md {@include sf-child-rules(lg-);}

/*********************************** Grid ************************************/

@mixin sf-grid-rules($prefix: '') {
  $name: '.#{$prefix}grid';

  #{$name}-1, #{$name}-2, #{$name}-3, #{$name}-4, #{$name}-5, #{$name}-6 {
    display: flex;
    flex-wrap: wrap;

    // Prevent children from unexpectedly stretching or shrinking.
    > * {
      flex-grow: 0;
      flex-shrink: 0;
    }
  }

  #{$name}-1 > * {flex-basis: 100%}
  #{$name}-2 > * {flex-basis: 50%}
  #{$name}-3 > * {flex-basis: calc(1/3 * 100%)}
  #{$name}-4 > * {flex-basis: 25%}
  #{$name}-5 > * {flex-basis: 20%}
  #{$name}-6 > * {flex-basis: calc(1/6 * 100%)}
}

@include sf-grid-rules;
@include sf-eq-sm {@include sf-grid-rules(sm-);}
@include sf-gt-sm {@include sf-grid-rules(md-);}
@include sf-gt-md {@include sf-grid-rules(lg-);}
